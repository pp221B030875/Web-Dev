{"ast":null,"code":"import * as i0 from \"@angular/core\";\n//Interceptors help us ensure to process\n// all HTTP requests and responses before\n// sending or getting the request, giving us the power to manage communication.\nexport class AuthInterceptor {\n  constructor() {}\n  //Observable in Angular is a feature\n  // that provides support for delivering\n  // messages between different parts of your single-page application.\n  intercept(req, next) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      //creating a new request by clonning the current request but updating the headers\n      const newReq = req.clone({\n        headers: req.headers.set('Authorization', `JWT ${token}`)\n        //A request header is an HTTP header\n        // that can be used in an HTTP request\n        // to provide information about the request\n        // context, so that the server can tailor the response.\n        //\n      });\n\n      return next.handle(newReq);\n    }\n    return next.handle(req);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)();\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":";AAKA;AACA;AACA;AACA,OAAM,MAAOA,eAAe;EAC1BC,eAAe;EACf;EACA;EACA;EACAC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAC;MACR;MACA,MAAMG,MAAM,GAAGL,GAAG,CAACM,KAAK,CAAC;QACvBC,OAAO,EAAEP,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,OAAON,KAAK,EAAE;QACxD;QACA;QACA;QACA;QACA;OACD,CAAC;;MACF,OAAOD,IAAI,CAACQ,MAAM,CAACJ,MAAM,CAAC;;IAG5B,OAAOJ,IAAI,CAACQ,MAAM,CAACT,GAAG,CAAC;EACzB;;AArBWH,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAa,SAAfb,eAAe;AAAA","names":["AuthInterceptor","constructor","intercept","req","next","token","localStorage","getItem","newReq","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["D:\\Other\\WebDev\\hhfront\\src\\app\\AuthInterceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\n//Interceptors help us ensure to process\r\n// all HTTP requests and responses before\r\n// sending or getting the request, giving us the power to manage communication.\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor() {}\r\n  //Observable in Angular is a feature\r\n  // that provides support for delivering\r\n  // messages between different parts of your single-page application.\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = localStorage.getItem('token');\r\n    if (token){\r\n      //creating a new request by clonning the current request but updating the headers\r\n      const newReq = req.clone({\r\n        headers: req.headers.set('Authorization', `JWT ${token}`),\r\n        //A request header is an HTTP header\r\n        // that can be used in an HTTP request\r\n        // to provide information about the request\r\n        // context, so that the server can tailor the response.\r\n        //\r\n      })\r\n      return next.handle(newReq);\r\n    }\r\n\r\n    return next.handle(req);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}